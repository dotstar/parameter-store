AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC and Cloud9 instance, including VPCs for a future Aurora database.

Parameters:
  DBCIDR1:
    Type: String
    Default: "10.2.202.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR2:
    Type: String
    Default: "10.2.203.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR3:
    Type: String
    Default: "10.2.204.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: plab
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.2.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.2.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.2.2.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.2.11.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.2.12.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  IsEventEngine:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
      
  # Used for debugging the CF template.
  # Add conditions to resource you don't want to build
  SkipThisParameter:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  
  # For one immersion day, I am running both parameter store and S3 labs
  # This switch toggles making the S3 resources for the 2nd lab
  MakeS3BucketParameter:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
      
Conditions:
  EventEngine: !Equals [ !Ref IsEventEngine, true]
  NotEventEngine: !Equals [ !Ref IsEventEngine, false]
  SkipThis: !Equals [ !Ref SkipThisParameter, false]
  MakeS3Bucket: !Equals [ !Ref MakeS3BucketParameter, true ]


Resources:  
            
    # Pre-create parameters
    # Note that the TAGS matter.  They are used in an IAM role to control access to the parameters

    DevLogin:
        Type: AWS::SSM::Parameter
        Properties:
            Description: "Administrative login for Dev DB"
            Name: /mydb/Dev/Login
            Tags:
                "Env": "Dev"
            Value: Uninitialized
            Tier: Standard
            Type: String
    DevPassword:
        Type: AWS::SSM::Parameter
        Properties:
            Description: "Administrative password for Dev DB"
            Name: /mydb/Dev/Password
            Tags:
                "Env": "Dev"
            Value: Uninitialized
            Tier: Standard
            Type: String      
    ProdLogin:
        Type: AWS::SSM::Parameter
        Properties:
            Description: "Administrative login for Prod DB"
            Name: /mydb/Prod/Login
            Tags:
                "Env": "Prod"
            Value: Uninitialized
            Tier: Standard
            Type: String
    ProdPassword:
        Type: AWS::SSM::Parameter
        Properties:
            Description: "Administrative password for Prod DB"
            Name: /mydb/Prod/Password
            Tags:
                "Env": "Prod"
            Value: Uninitialized
            Tier: Standard
            Type: String 
    
    Bucket01:
        Type: AWS::S3::Bucket
        Condition: MakeS3Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        # Properties:
            # BucketName: daveaws-foo
            # BucketEncryption:
            #     ServerSideEncryptionConfiguration:
            #         - ServerSideEncryptionByDefault:
            #             SSEAlgorithm: AES256
                        
    # This instance run's it's user-data script then terminates.
    # It is used to put some data in the S3 buckets.
    # This functionality should probably be a custom resource.
    EC2Admin: 
        Type: "AWS::EC2::Instance"
        DependsOn: Bucket01
        Condition: MakeS3Bucket
        Properties: 
            ImageId: !Ref LatestAmiId
            InstanceType: "t2.micro"
            SubnetId: 
                Ref: PublicSubnet1
            Tags: 
                - Key: Name
                  Value: Admin
            SecurityGroupIds: 
                - Ref: NoGoInstanceSecurityGroup
            IamInstanceProfile: 
                Ref: AdminInstanceProfile
            # BlockDeviceMappings: 
                # - DeviceName: "/dev/xvda"
                  # Ebs: 
                  # VolumeType: gp2
                  # DeleteOnTermination: true
                  # VolumeSize: 10
            UserData: 
                'Fn::Base64': 
                  !Sub |
                    #!/bin/bash -xe
                    BUCKET01=${Bucket01}
                    echo 'AdminInstance' | sudo tee -a  /proc/sys/kernel/hostname
                    dd if=/dev/zero of=/tmp/output  bs=1M  count=1
                    aws s3api put-object --bucket $BUCKET01 --key app1/file1 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app1/file2 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app1/file3 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app1/file4 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app1/file5 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app2/file1 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app2/file2 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app2/file3 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app2/file4 --body /tmp/output
                    aws s3api put-object --bucket $BUCKET01 --key app2/file5 --body /tmp/output
                    sleep 2
                    # Now stop this instance
                    AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                    # delete last digit to turn AZ into REGION
                    REGION=$(echo $AZ | sed s/.$//)
                    iid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                    aws ec2 terminate-instances --instance-ids $iid --region $REGION

    AdminRole: 
        Type: "AWS::IAM::Role"
        Condition: MakeS3Bucket
        Properties: 
            Description: Used just long enough to put some data in S3 then delete's self via user-data
            # Enable Session Manager for debugging
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: Allow
                      Principal: 
                        Service: 
                            - "ec2.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Path: "/"
            Policies: 
            - PolicyName: admin
              PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                - Effect: Allow
                  Action: 
                  - "ec2:TerminateInstances"
                  - "s3:*"
                  Resource: "*"
        
 
    AdminInstanceProfile: 
        Condition: MakeS3Bucket
        Type: "AWS::IAM::InstanceProfile"
        Properties: 
            Path: "/"
            Roles: 
                - !Ref AdminRole
        
    NoGoInstanceSecurityGroup:
        Condition: MakeS3Bucket
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: No Inbound ingress rules
            VpcId:
                Ref: VPC
        
    Cloud9EE:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: EventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, !Ref "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/parameter-store
                  PathComponent: /parameter-store
                - RepositoryUrl: https://github.com/dotstar/amazon-s3-security-settings-and-controls
                  PathComponent: /amazon-s3-security-settings-and-controls
            OwnerArn: !Sub  "arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey"
            SubnetId: !Ref PublicSubnet1
            
    Cloud9:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: NotEventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, !Ref "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/parameter-store
                  PathComponent: /parameter-store
                - RepositoryUrl: https://github.com/dotstar/amazon-s3-security-settings-and-controls
                  PathComponent: /amazon-s3-security-settings-and-controls
            SubnetId: !Ref PublicSubnet1
      
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "MySQL DB Subnet"
            DBSubnetGroupName: !Join [ '-',[!Ref EnvironmentName,"mydbsubnet",!Ref "AWS::StackName"]]
            SubnetIds: 
            - !Ref DBSubnet01
            - !Ref DBSubnet02
            - !Ref DBSubnet03
            
    DBSubnet01:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-1a"
            CidrBlock: !Ref DBCIDR1
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ ' ' , [ !Ref EnvironmentName,!Ref "AWS::StackName" ," (DB Subnet AZ1)" ]  ]           
    DBSubnet02:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-1b"
            CidrBlock: !Ref DBCIDR2
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ ' ' , [ !Ref EnvironmentName,!Ref "AWS::StackName" ," DB Subnet (AZ2)"  ]]
    DBSubnet03:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-1c"
            CidrBlock: !Ref DBCIDR3
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ ' ' , [ !Ref EnvironmentName,!Ref "AWS::StackName" ," DB Subnet (AZ3)" ]]
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2


    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2



Outputs:
  DBSubnetGroup:
    Description: subnet, created for Aurora
    Value: !Ref DBSubnetGroup
    Export:
        Name: DBSubnetGroup
  PrivateSubnet1Id:
    Description: Private Subnet1, used by Lambda Function in parameter store lab
    Value: !Ref PrivateSubnet1
    Export:
        Name: PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: Private Subnet2, used by Lambda Function in parameter store lab
    Value: !Ref PrivateSubnet2
    Export:
        Name: PrivateSubnet2Id
  VPCId:
    Description: The VPC ID we just created for the parameter store lab
    Value: !Ref VPC
    Export:
        Name: VPCId
  BucketName:
    Description: Bucket used in S3 lab
    Condition: MakeS3Bucket
    Value: !Ref Bucket01
    Export:
        Name: LabBucketName
  
