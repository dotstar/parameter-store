AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC and Cloud9 instance, including VPCs for a future Aurora database.
Parameters:
  DBCIDR1:
    Type: String
    Default: "10.2.202.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR2:
    Type: String
    Default: "10.2.203.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR3:
    Type: String
    Default: "10.2.204.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'


  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: ps-lab

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.2.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'


  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.2.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.2.2.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.2.11.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.2.12.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  IsEventEngine:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  
Conditions:
  EventEngine: !Equals [ !Ref IsEventEngine, true]
  NotEventEngine: !Equals [ !Ref IsEventEngine, false]

Resources:  
          
    Cloud9EE:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: EventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/parameter-store
                  PathComponent: /parameter-store
            OwnerArn: !Sub  "arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey"
            SubnetId: !Ref PublicSubnet1
            
    Cloud9:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: NotEventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/parameter-store
                  PathComponent: /parameter-store
            OwnerArn: !Sub  "arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey"
            SubnetId: !Ref PublicSubnet1
      
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "MySQL DB Subnet"
            DBSubnetGroupName: !Join [ '-',[!Ref EnvironmentName,"mydbsubnet",!Ref "AWS::StackName"]]
            SubnetIds: 
            - !Ref DBSubnet01
            - !Ref DBSubnet02
            - !Ref DBSubnet03
            
    DBSubnet01:
        Type: AWS::EC2::Subnet
        Properties:
            # AvailabilityZone: "us-east-1a"
            CidrBlock: !Ref DBCIDR1
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2a",!Ref "AWS::StackName" ] ]            
    DBSubnet02:
        Type: AWS::EC2::Subnet
        Properties:
            # AvailabilityZone: "us-east-1b"
            CidrBlock: !Ref DBCIDR2
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2b",!Ref "AWS::StackName" ] ]            
    DBSubnet03:
        Type: AWS::EC2::Subnet
        Properties:
            # AvailabilityZone: "us-east-1c"
            CidrBlock: !Ref DBCIDR3
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2c",!Ref "AWS::StackName" ] ]
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2


    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2



Outputs:
  DBSubnetGroup:
    Description: subnet, created for Aurora
    Value: !Ref DBSubnetGroup
    Export:
        Name: DBSubnetGroup
  PrivateSubnet1Id:
    Description: Private Subnet1, used by Lambda Function in parameter store lab
    Value: !Ref PrivateSubnet1
    Export:
        Name: PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: Private Subnet2, used by Lambda Function in parameter store lab
    Value: !Ref PrivateSubnet2
    Export:
        Name: PrivateSubnet2Id
  VPCId:
    Description: The VPC ID we just created for the parameter store lab
    Value: !Ref VPC
    Export:
        Name: VPCId
