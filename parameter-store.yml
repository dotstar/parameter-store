AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a serverless Aurora database, with login information sourced from parameter store
Parameters:

  DevPass:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /mydb/Dev/Password
    NoEcho: True
  DevLogin:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /mydb/Dev/Login
  DBCIDR1:
    Type: String
    Default: "10.2.202.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR2:
    Type: String
    Default: "10.2.203.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  DBCIDR3:
    Type: String
    Default: "10.2.204.0/24"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'


  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'


  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  
  MakeDB:
    Type: String
    Description: Set to True if you want to create an Aurora MySQL serverless database cluster
    Default: False
    
  MakePrivateSubnets:
    Type: String
    Description: To skip building private subnets and their associated gateways, set False
    Default: False
      
Conditions:
  MakeDatabase:
    !Equals [ !Ref MakeDB, "True"]
  MakePrivate:    
    !Equals [ !Ref MakePrivateSubnets, "True"]

Resources:
          
    DevDB:
        Type: AWS::RDS::DBCluster
        Condition: MakeDatabase
        Properties:
            Engine: aurora
            EngineMode: serverless
            DatabaseName: "DevDB"
            MasterUsername: !Ref DevLogin
            MasterUserPassword: !Ref DevPass
            DBClusterIdentifier: !Join [ "-", ["DevDBCluster",!Ref "AWS::StackName"]]
            DBSubnetGroupName: !Ref DBSubnetGroup
            BackupRetentionPeriod: 1
            DeletionProtection: false
            StorageEncrypted: true
            ScalingConfiguration:
                AutoPause: true
                MaxCapacity: 8
                MinCapacity: 1
                SecondsUntilAutoPause: 1800

            Tags:
                - Key: CostCenter
                  Value: "1520"
            VpcSecurityGroupIds:
                - !Ref DBSecurityGroup

    DBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Join [ "-", [ "db-sg", !Ref EnvironmentName] ]
            GroupDescription: "database security group"
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Join [ "-", [ "db-sg", !Ref EnvironmentName] ]
           
    ClientSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Join [ "-", [ "client-sg", !Ref EnvironmentName] ]
            GroupDescription: "client security group"
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Join [ "-", [ "client-sg", !Ref EnvironmentName] ]

                
    # InboundSSH:
        # Type: AWS::EC2::SecurityGroupIngress
        # Properties:
            # IpProtocol: tcp
            # FromPort: 22
            # ToPort: 22
            # GroupId: !Ref ClientSecurityGroup
            # CidrIp: !Ref IngressIPforSSH

# Allow inbound MySQL Requests               
    InboundMySQL:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref DBSecurityGroup
            GroupId: !Ref DBSecurityGroup            
           
            
    Cloud9:
        Type: AWS::Cloud9::EnvironmentEC2
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/parameter-store
                  PathComponent: /parameter-store
#            OwnerArn: String
            SubnetId: !Ref PublicSubnet1

    SQLLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            Description: "Allow SQLLambda function to access VPC and Parameter Store"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            AssumeRolePolicyDocument:  
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                        - lambda.amazonaws.com
                      Action:
                        - 'sts:AssumeRole'
            Path: /
            RoleName: !Join ["-",["basicLambdaAndParameterStore",!Ref "AWS::StackName"]]
            Policies:
                - PolicyName: GetParameters
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: 
                            - ssm:GetParameter
                            - ssm:GetParameters
                            - ssm:GetParametersbyPath
                            - ssm:DescribeParameters
                        Resource: '*'


    # SQL Function which gets parameters from parameter store and call SELECT from SQL
    SQLLambda:
        Type: AWS::Lambda::Function
        Properties:
            Description: "Call DevDB with simple SELECT using Parameter Store"
            Runtime: "python3.6"
            Environment:
                Variables:
                    MySQLEndpoint: !GetAtt DevDB.Endpoint.Address
                    MySQLPort: "3306"
                    Environment: "Dev"
                    ParamRoot: /mydb
            FunctionName: !Join ["-",["ps",!Ref "AWS::StackName"]]
            Handler: index.lambda_handler
            Layers: 
                - !Ref MySQLLambdaLayer
            MemorySize: 128
            Role: !GetAtt SQLLambdaRole.Arn
            Timeout: 20
            VpcConfig:
                SubnetIds: 
                    - !Ref PrivateSubnet1
                    - !Ref PrivateSubnet2
                SecurityGroupIds:
                    - !Ref DBSecurityGroup
                    - !Ref ClientSecurityGroup
            Code:
                ZipFile: |
                    import boto3
                    import os
                    import json
                    import mysql.connector

                    ps = boto3.client('ssm', region_name='us-east-2')

                    db = "DevDB"

                    # Initialize SQL Endpoint, Port, and Parameter Store values from environment
                    environment = os.environ.get('Environment', 'Dev')
                    parameterRoot = os.environ.get('ParamRoot', '/mydb') + "/" + environment
                    host = os.environ.get('MySQLEndpoint', " devdbcluster-ps.cluster-cjdii2k9xlvv.us-east-2.rds.amazonaws.com ")
                    port = os.environ.get('MySQLPort', "3306")

                    print("host:",host)

                    # Get the login from parameter store
                    login = ""
                    password = ""
                    try:
                       print("calling get_parameter")
                       login = ps.get_parameter(Name=(parameterRoot + "/Login"))['Parameter']['Value']
                       # print("login: ", login)
                       password = ps.get_parameter(Name=(parameterRoot + "/Password"))['Parameter']['Value']
                       # print("password: ", password)
                    except Exception as e:
                       print("unknown exception", e)
                       exit(1)

                    # Connect to MySQL
                    try:
                       mydb = mysql.connector.connect(
                          host=host,
                          user=login,
                          database=db,
                          password=password
                       )
                    except Exception as e:
                       print("error connecting to MySql: ",e)
                       exit(2)
                       

                    def lambda_handler(event, context):
                       print("event: ",event,"\n","-"*20)
                       result = json.loads('{"Error": "SQL Failed"}')
                       SQL = "SELECT * FROM customer LIMIT 10"
                       try:
                          mycursor = mydb.cursor()

                          mycursor.execute(SQL)

                          myresult = mycursor.fetchall()
                          result = json.dumps(myresult)
                       except Exception as e:
                             print("error executing SQL: ",SQL," : ",e)
                       return(result)
                    if __name__ == '__main__':
                       r = lambda_handler(event="",context="")
                       print(r)
            

    MySQLLambdaLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            CompatibleRuntimes:
                - python3.6
                - python3.7
                - python3.8
            Description: MySQL Client Libraries
            LayerName: !Sub 'mysql-lambda-layer-${AWS::StackName}'
            Content:
                S3Bucket: daveaws
                # S3Key: layers/mysql-layer.zip
                S3Key: layers/mysql-lambda-layer.zip
            
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "MySQL DB Subnet"
            DBSubnetGroupName: !Join [ '-',[!Ref EnvironmentName,"mydbsubnet",!Ref "AWS::StackName"]]
            SubnetIds: 
            - !Ref DBSubnet01
            - !Ref DBSubnet02
            - !Ref DBSubnet03
            
    DBSubnet01:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-2a"
            CidrBlock: !Ref DBCIDR1
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2a",!Ref "AWS::StackName" ] ]            
    DBSubnet02:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-2b"
            CidrBlock: !Ref DBCIDR2
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2b",!Ref "AWS::StackName" ] ]            
    DBSubnet03:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: "us-east-2c"
            CidrBlock: !Ref DBCIDR3
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Join [ '-' , [ !Ref EnvironmentName,"db2c",!Ref "AWS::StackName" ] ]
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        # Condition: MakePrivate
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        # Condition: MakePrivate
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Condition: MakePrivate
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Condition: MakePrivate
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Condition: MakePrivate
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Condition: MakePrivate
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2


    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Condition: MakePrivate
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Condition: MakePrivate
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Condition: MakePrivate
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Condition: MakePrivate
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Condition: MakePrivate
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Condition: MakePrivate
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    # NoIngressSecurityGroup:
        # Type: AWS::EC2::SecurityGroup
        # Properties:
            # GroupName: "no-ingress-sg"
            # GroupDescription: "Security group with no ingress rule"
            # VpcId: !Ref VPC

Outputs:
  DBEndpoint:
    Condition: MakeDatabase
    Description: MySQL endpoint
    Value: !GetAtt DevDB.Endpoint.Address
    Export:
        Name: DevDB-Endpoint
  Cloud9IDEUrl:
    Description: Cloud9 Development Environment
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9}"
  LambdaName:
    Description: Name of the Lambda Function so that we can find it later from CLI tool
    Value: !Ref SQLLambda
    Export:
        Name: DBLambda

